
DATA STRUCTURES AND COLLECTIONS
1. Select returns a new array based on the block's *return value*.  If the return value evaluates to true, then the element is selected.

for example putting puts in the block, returns nil (from puts) and hence the return array is an empty array (nothing selected).

select looks at the truthiness of the block to return the array elements.

arr.select do |n|
n+1
puts n
end


2. map is for transformation.  Changing the elements.

Map returns a new array based on the blocks *return value*.  Each element is transformed based on the return value
putting puts inside a map block will return an array of nils (see select above)

Return, side effects and output  -  this is what a code executes to.

3. in a ruby code, you are in the main context... lots of modules are mixed in by default.  Like Kernel.  

PASS BY REFERENCE/PASS BY VALUE

1.  
a = 'hi there'   # variable a points to object 'hi there'
b = a  # variable b points to the *same* object as variable a.
b << ' partner' # this operation will change the value for both a and b as they point to the
                  same object.  Both a and b = 'hi there partner'

2. 
a = 'hello'
b = a

a += b  # this is a = a + b.  This is reassignment.  Which means that now the variable
                              a is pointing to a *different* object with value 'hello hello'
b << 'there'   # will change the value of b (= 'hello there') but do nothing for a.

==>>> Re-assignment will always make the variable point to another object.  so in the method below

def amethod(param)  # param = a, param points to variable a object right now
  param += 'there'  # param = param + 'there'  new object created.  param now points to that
  param << 'world'  # param object value changed to 'hello thereworld'.  variable a unaffected/
end

a = 'hello'
amethod(a)
puts a

This will print out 'hello' as the param variable in the method now points to ANOTHER object.
Its return value will be 'hello there world' if we do puts amethod(a)

DEBUGGING CODE 

p vs puts :  p calls inspect method, puts calls to_s
